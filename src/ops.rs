const ADD_RM: u8 = 0x00
const PUSH_ES: u8 = 0x06
const POP_ES: u8 = 0x07
const OR_RM: u8 = 0x08
const PUSH_CS: u8 = 0x0E
const TWO_BYTE: u8 = 0x0F
const ADC_RM: u8 = 0x10
const PUSH_SS: u8 = 0x16
const POP_SS: u8 = 0x17
const SBB_RM: u8 = 0x18
const PUSH_DS: u8 = 0x1E
const POP_DS: u8 = 0x1F
const AND_RM: u8 = 0x20
const ES_OVR: u8 = 0x26
const DAA: u8 = 0x27
const SUB_RM: u8 = 0x28
const CS_OVR: u8 = 0x2E
const DAS: u8 = 0x2F
const XOR_RM: u8 = 0x30
const SS_OVR: u8 = 0x36
const AAA: u8 = 0x37
const CMP_RM: u8 = 0x38
const DS_OVR: u8 = 0x3E
const AAS: u8 = 0x3F
const INC_R: u8 = 0x40
const DEC_R: u8 = 0x48
const PUSH_R: u8 = 0x50
const POP_R: u8 = 0x58
const JO: u8 = 0x70
const JNO: u8 = 0x71
const JC: u8 = 0x72
const JNC: u8 = 0x73
const JE: u8 = 0x74
const JNE: u8 = 0x75
const JNA: u8 = 0x76
const JA: u8 = 0x77
const JS: u8 = 0x78
const JNS: u8 = 0x79
const JP: u8 = 0x7A
const JNP: u8 = 0x7B
const JL: u8 = 0x7C
const JNL: u8 = 0x7D
const JNG: u8 = 0x7E
const JG: u8 = 0x7F
const GRP1_B: u8 = 0x80
const GRP1_W: u8 = 0x81
const GRP1_Bb: u8 = 0x82
const GRP1_WB: u8 = 0x83
const TEST_B: u8 = 0x84
const TEST_W: u8 = 0x85
const XCHG_B: u8 = 0x86
const XCHG_W: u8 = 0x87
const MOV_RM: u8 = 0x88
const MOV_SR: u8 = 0x8C // From SegReg
const LEA: u8 = 0x8D
const MOV_RS: u8 = 0x8E // To SegReg
const POP: u8 = 0x8F
const XCHG_R: u8 = 0x90
const NOP: u8 = 0x90
const CBW: u8 = 0x98
const CWD: u8 = 0x99
const CALLF: u8 = 0x9A
const FWAIT: u8 = 0x9B // Floating Point ?
const PUSHF: u8 = 0x9C
const POPF: u8 = 0x9D
const SAHF: u8 = 0x9E
const LAHF: u8 = 0x9F
const MOV_AL_M: u8 = 0xA0
const MOV_AX_M: u8 = 0xA1
const MOV_M_AL: u8 = 0xA2
const MOV_M_AX: u8 = 0xA3
const MOVSB: u8 = 0xA4
const MOVSW: u8 = 0xA5
const CMPSB: u8 = 0xA6
const CMPSW: u8 = 0xA7
const TEST_AL: u8 = 0xA8
const TEST_AX: u8 = 0xA9
const STOSB: u8 = 0xAA
const STOSW: u8 = 0xAB
const LODSB: u8 = 0xAC
const LODSW: u8 = 0xAD
const SCASB: u8 = 0xAE
const SCASW: u8 = 0xAF
const MOV_BR: u8 = 0xB0
const MOV_WR: u8 = 0xB8
const RETN_I: u8 = 0xC2
const RETN: u8 = 0xC3
const LES: u8 = 0xC4
const LDS: u8 = 0xC5
const MOV_B_I: u8 = 0xC6
const MOV_W_I: u8 = 0xC7
const RETF_I: u8 = 0xCA
const RETF: u8 = 0xCB
const INT3: u8 = 0xCC
const INT: u8 = 0xCD
const INTO: u8 = 0xCE
const IRET: u8 = 0xCF
const GRP2_B_1: u8 = 0xD0
const GRP2_W_1: u8 = 0xD1
const GRP2_B_CL: u8 = 0xD2
const GRP2_W_CL: u8 = 0xD3
const AAM: u8 = 0xD4 // + 0x0A
const AMX: u8 = 0xD4
const AAD: u8 = 0xD5 // + 0x0A
const ADX: u8 = 0xD5
const UND_D6: u8 = 0xD6 // Undefined, but no #UD
const XLATB: u8 = 0xD7
// Floating Point 0xD8 - 0xDF
const LOOPNZ: u8 = 0xE0
const LOOPZ: u8 = 0xE1
const LOOP: u8 = 0XE2
const JCXZ: u8 = 0xE3
const IN_B_I: u8 = 0xE4
const IN_W_I: u8 = 0xE5
const OUT_I_B: u8 = 0xE6
const OUT_I_W: u8 = 0xE7
const CALL: u8 = 0xE8
const JMP: u8 = 0xE9
const JMPF: u8 = 0xEA
const JMP8: u8 = 0xEB
const IN_B_DX: u8 = 0xEC
const IN_W_DX: u8 = 0xED
const OUT_DX_B: u8 = 0xEE
const OUT_DX_W: u8 = 0xEF
const LOCK: u8 = 0xF0
const UND_F1: u8 = 0xF1 // Undefined, but no #UD
const REPNZ: u8 = 0xF2
const REPZ: u8 = 0xF3
const REP: u8 = 0xF3
const HLT: u8 = 0xF4
const CMC: u8 = 0xF5
const GRP3_B: u8 = 0xF6
const GRP3_W: u8 = 0xF7
const CLC: u8 = 0xF8
const STC: u8 = 0xF9
const CLI: u8 = 0xFA
const STI: u8 = 0xFB
const CLD: u8 = 0xFC
const STD: u8 = 0xFD
const GRP4_B: u8 = 0xFE
const GRP4_W: u8 = 0xFF
